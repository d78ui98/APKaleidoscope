import subprocess
import re
from androguard import session, misc
from .utility import utility_class

# Using utility 
util = utility_class.util

class ExploitIntentFilter(object):
    '''
    This class has various functions to interact with the Android manifest XML
    '''

    def extract_from_androidmanifest_xml(self, apk_file):
        '''
        Using androguard lib to extract activities
        '''
        try:
            sess = misc.get_default_session()
            util.mod_log("[+] Analyzing {} ...".format(apk_file), util.OKCYAN)
            a, d, dx = misc.AnalyzeAPK(apk_file, session=sess)
            final_output = {
                "android_version":"",
                "app_name":"",
                "package_name":"",
                "uses_permission": "",
                "permission":"",
                "intent_filter_list":""
            }
            util.mod_log("[+] Found activities ", util.OKCYAN)
            activity_list = a.get_activities()
            intent_filter_list = []
            for items in activity_list:
                util.mod_log("[+] Exctracting intent filters ", util.OKCYAN)
                intent_filter = a.get_intent_filters('activity', items)
                if len(intent_filter) != 0:
                    intent_filter_list.append({items:intent_filter})
            
            util.mod_log("[+] Extracting information from AndroidManifest.xml", util.OKCYAN)
            final_output["android_version"] = a.androidversion
            final_output["app_name"] = a.get_app_name()
            final_output["package_name"] = a.get_package()
            final_output["uses_permission"] = a.uses_permissions
            final_output["permission"] = a.get_permissions()

            # getting all search keys for com package
            search_key = a.get_package().split(".")
            if "com" in search_key:
                search_key.remove("com")
            if "cm" in search_key:
                search_key.remove("cm")

            # defining constants
            orignal_key = ""
            final_list = []

            # helper functions
            def getList(dict):
                return list(dict.keys())

            def checkKey(dict, key):
                if key in dict.keys():
                    return {key:dict[key]}
                else:
                    pass
            
            # gettting the keys with package of apps
            for items in intent_filter_list:
                list_of_keys = getList(items)
                keywords_to_search = list_of_keys[0].split('.')
                for i in range(len(search_key)):
                    if search_key[i] in keywords_to_search:
                        orignal_key = ".".join(keywords_to_search)
            
            # returning all the package intent filter output
            for items in intent_filter_list:
                output = checkKey(items, orignal_key)
                if output is None:
                    pass
                else:
                    final_list.append(output)
            final_list

            final_output["intent_filter_list"] = final_list
            return final_output
        except Exception as e:
            return str(e)

    def get_intent_list(self, json_input):
        '''
        method checks if input has intent filter or not
        in : json response
        out : intent filter list
        '''

        intent_filter_list = json_input["intent_filter_list"]
        if len(intent_filter_list) > 0:
            util.mod_log("[+] Intent filter list Not empty", util.OKCYAN)
            return intent_filter_list
        else:
            util.mod_log("[-] Intent filter list empty", util.FAIL)
            return "no intent filter found"

    def intent_filter_to_path(self, if_list, apk_src_path):
        '''
        method creates file path with activity names
        in : intent filter list, apk source path from conf file
        out : file paths for java activity
        '''
        final_path_list = list()
        path = str(apk_src_path) + "/sources/"
        for items in if_list:
            activity_name = list(items.keys())[0]
            activity_path = activity_name.replace(".", "/")
            util.mod_log("[+] Creating path to java files from activity name", util.OKCYAN)
            final_path = path + activity_path + ".java"
            final_path_list.append(final_path)
        return final_path_list
        '''
        [
                                    "grep", "-n", "-A", "2", "-B", "2", 
                                    match_string, 
                                    file_path
                                    ]
        '''
    def get_vulnerable_code(self, match_string, file_path):
        '''
        method returns code with matching string
        in : string to match and file path
        out : part of code matched
        '''
        util.mod_log("[+] Extacting {} from {}".format(match_string, file_path), util.OKCYAN)
        output = subprocess.run("grep -ni -A 2 -B 2 {} {}".format(match_string, file_path),
                                capture_output=True, 
                                text=True,
                                shell=True)
        return output.stdout
    
    def search_vulnerable_code(self, file, keyword_to_find):
        """
        method is wrapper around get_vulnerable_code. used to get all the 
        matching keywords in the code
        in : file: file path
             keyword_to_find: keyword to grep for
        out : dict of file and keyword
        """
        path_code_dict = {}
        code = self.get_vulnerable_code(keyword_to_find, file)
        if len(code) >0:
            path_code_dict.update({file:code})

        return path_code_dict
    
    def main(self, djson, extracted_apk_source_path):

        # final dictionary of search results
        android_xml_findings = {
            "getString" : "",
            "getStringExtra" : "",
            "getExtras" : "",
            "xss_dectections" : "",
            "getData" : "",
            "getUrl" : "",
        }

        #djson = self.extract_from_androidmanifest_xml("../smartplug.apk")
        #extracted_apk_source_path = "/home/kali/appsec-project/preprod/app_source/smartplug.apk"
        # walley #djson_walley={'android_version': {'Code': '10', 'Name': '10.0'}, 'app_name': 'Walley', 'package_name': 'com.thewalleyapp', 'uses_permission': [['android.permission.READ_SMS', None], ['android.permission.VIBRATE', None], ['android.permission.RECEIVE_BOOT_COMPLETED', None], ['android.permission.ACCESS_NETWORK_STATE', None], ['android.permission.INTERNET', None], ['android.permission.WAKE_LOCK', None], ['com.google.android.c2dm.permission.RECEIVE', None], ['com.google.android.finsky.permission.BIND_GET_INSTALL_REFERRER_SERVICE', None], ['com.sec.android.provider.badge.permission.READ', None], ['com.sec.android.provider.badge.permission.WRITE', None], ['com.htc.launcher.permission.READ_SETTINGS', None], ['com.htc.launcher.permission.UPDATE_SHORTCUT', None], ['com.sonyericsson.home.permission.BROADCAST_BADGE', None], ['com.sonymobile.home.permission.PROVIDER_INSERT_BADGE', None], ['com.anddoes.launcher.permission.UPDATE_COUNT', None], ['com.majeur.launcher.permission.UPDATE_BADGE', None], ['com.huawei.android.launcher.permission.CHANGE_BADGE', None], ['com.huawei.android.launcher.permission.READ_SETTINGS', None], ['com.huawei.android.launcher.permission.WRITE_SETTINGS', None], ['android.permission.READ_APP_BADGE', None], ['com.oppo.launcher.permission.READ_SETTINGS', None], ['com.oppo.launcher.permission.WRITE_SETTINGS', None], ['me.everything.badger.permission.BADGE_COUNT_READ', None], ['me.everything.badger.permission.BADGE_COUNT_WRITE', None], ['android.permission.FOREGROUND_SERVICE', None]], 'permission': ['android.permission.VIBRATE', 'me.everything.badger.permission.BADGE_COUNT_READ', 'com.sec.android.provider.badge.permission.READ', 'com.huawei.android.launcher.permission.WRITE_SETTINGS', 'android.permission.ACCESS_NETWORK_STATE', 'com.htc.launcher.permission.UPDATE_SHORTCUT', 'com.huawei.android.launcher.permission.READ_SETTINGS', 'android.permission.RECEIVE_BOOT_COMPLETED', 'com.htc.launcher.permission.READ_SETTINGS', 'android.permission.READ_APP_BADGE', 'com.huawei.android.launcher.permission.CHANGE_BADGE', 'android.permission.READ_SMS', 'android.permission.WAKE_LOCK', 'com.sonymobile.home.permission.PROVIDER_INSERT_BADGE', 'me.everything.badger.permission.BADGE_COUNT_WRITE', 'com.majeur.launcher.permission.UPDATE_BADGE', 'android.permission.INTERNET', 'com.oppo.launcher.permission.READ_SETTINGS', 'com.google.android.finsky.permission.BIND_GET_INSTALL_REFERRER_SERVICE', 'com.sonyericsson.home.permission.BROADCAST_BADGE', 'com.anddoes.launcher.permission.UPDATE_COUNT', 'com.oppo.launcher.permission.WRITE_SETTINGS', 'com.google.android.c2dm.permission.RECEIVE', 'android.permission.FOREGROUND_SERVICE', 'com.sec.android.provider.badge.permission.WRITE'], 'intent_filter_list': [{'com.thewalleyapp.MainActivity': {'action': ['android.intent.action.MAIN'], 'category': ['android.intent.category.LAUNCHER']}}, {'com.google.firebase.auth.internal.GenericIdpActivity': {'action': ['android.intent.action.VIEW'], 'category': ['android.intent.category.DEFAULT', 'android.intent.category.BROWSABLE']}}, {'com.google.firebase.auth.internal.RecaptchaActivity': {'action': ['android.intent.action.VIEW'], 'category': ['android.intent.category.DEFAULT', 'android.intent.category.BROWSABLE']}}]}
        # smartplug #djson = {'android_version': {'Code': '10040', 'Name': '9.17.3.0'}, 'app_name': 'Aptoide', 'package_name': 'cm.aptoide.pt', 'uses_permission': [['android.permission.WAKE_LOCK', None], ['android.permission.READ_SYNC_STATS', None], ['com.android.launcher.permission.INSTALL_SHORTCUT', None], ['android.permission.RECEIVE_BOOT_COMPLETED', None], ['android.permission.INSTALL_PACKAGES', None], ['android.permission.CHANGE_WIFI_MULTICAST_STATE', None], ['android.permission.ACCESS_WIFI_STATE', None], ['android.permission.READ_SYNC_SETTINGS', None], ['android.permission.WRITE_SYNC_SETTINGS', None], ['android.permission.AUTHENTICATE_ACCOUNTS', None], ['android.permission.GET_ACCOUNTS', None], ['android.permission.MANAGE_ACCOUNTS', None], ['android.permission.INTERNET', None], ['android.permission.USE_CREDENTIALS', None], ['android.permission.READ_EXTERNAL_STORAGE', None], ['android.permission.WRITE_EXTERNAL_STORAGE', None], ['android.permission.CAMERA', None], ['android.permission.ACCESS_NETWORK_STATE', None], ['com.google.android.finsky.permission.BIND_GET_INSTALL_REFERRER_SERVICE', None]], 'permission': ['android.permission.INTERNET', 'com.google.android.finsky.permission.BIND_GET_INSTALL_REFERRER_SERVICE', 'com.android.launcher.permission.INSTALL_SHORTCUT', 'android.permission.GET_ACCOUNTS', 'android.permission.ACCESS_NETWORK_STATE', 'android.permission.WRITE_SYNC_SETTINGS', 'android.permission.MANAGE_ACCOUNTS', 'android.permission.RECEIVE_BOOT_COMPLETED', 'android.permission.READ_SYNC_SETTINGS', 'android.permission.ACCESS_WIFI_STATE', 'android.permission.USE_CREDENTIALS', 'android.permission.WAKE_LOCK', 'android.permission.CAMERA', 'android.permission.INSTALL_PACKAGES', 'android.permission.WRITE_EXTERNAL_STORAGE', 'android.permission.READ_EXTERNAL_STORAGE', 'android.permission.CHANGE_WIFI_MULTICAST_STATE', 'android.permission.AUTHENTICATE_ACCOUNTS', 'android.permission.READ_SYNC_STATS'], 'intent_filter_list': [{'cm.aptoide.pt.view.MainActivity': {'action': ['android.intent.action.MAIN'], 'category': ['android.intent.category.LAUNCHER']}}, {'com.facebook.CustomTabActivity': {'action': ['android.intent.action.VIEW'], 'category': ['android.intent.category.DEFAULT', 'android.intent.category.BROWSABLE']}}, {'cm.aptoide.pt.DeepLinkIntentReceiver': {'action': ['android.intent.action.VIEW'], 'category': ['android.intent.category.DEFAULT', 'android.intent.category.BROWSABLE']}}]}
        file_paths = self.intent_filter_to_path(self.get_intent_list(djson), extracted_apk_source_path)

        # Searching for getString in java files
        getString_list = []
        util.mod_log("[+] Searching getString in java files ", util.OKCYAN)
        for file in file_paths:
            result = self.search_vulnerable_code(file, "-e getString")
            if len(result) > 0:
                getString_list.append(result)
        android_xml_findings["getString"] = getString_list
        
        # Searching for getDataString in java files
        getStringExtra_list = []
        for file in file_paths:
            result = self.search_vulnerable_code(file, "-e getStringExtra")
            if len(result) > 0:
                getStringExtra_list.append(result)
        android_xml_findings["getStringExtra"] = getStringExtra_list

        # Searching for getData in java files
        getData_list = []
        for file in file_paths:
            result = self.search_vulnerable_code(file, "-e getData(")
            if len(result) > 0:
                getData_list.append(result)
        android_xml_findings["getData"] = getData_list


        # Searching for getExtras in java files
        getExtras_list = []
        for file in file_paths:
            result = self.search_vulnerable_code(file, "-e getExtras")
            if len(result) > 0:
                getExtras_list.append(result)
        android_xml_findings["getExtras"] = getExtras_list

        # Searching for getUrl in java files
        getUrl_list = []
        for file in file_paths:
            result = self.search_vulnerable_code(file, "-e getUrl")
            if len(result) > 0:
                getUrl_list.append(result)
        android_xml_findings["getUrl"] = getUrl_list

        # payload for xss in java files
        xss_dectections_list = []
        for file in file_paths:
            result = self.search_vulnerable_code(file, "-e getIntent().getDataString( -e intent.setData")
            if len(result) > 0:
                xss_dectections_list.append(result)
        android_xml_findings["xss_dectections"] = xss_dectections_list
        
        return android_xml_findings


# try:
#     exploit_obj= ExploitIntentFilter() 
#     #print(exploit_obj.extract_from_androidmanifest_xml("../com.thewalleyapp.apk"))
#     #print(exploit_obj.extract_from_androidmanifest_xml("../smartplug.apk"))
#     print(exploit_obj.extract_from_androidmanifest_xml("../ecostruxure-it_1.1.15.apk"))
#     #print(exploit_obj.main())  
# except Exception as e:
#     print(str(e))
