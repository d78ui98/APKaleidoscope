"""
from exploit_intent_filter import ExploitIntentFilter

print("**************************************")
#getExternalFilesDir
def local_file_vul():
    eif_obj  = ExploitIntentFilter()

    # Extract data from andorid manifest xml
    #android_manifest_xml_data = eif_obj.extract_from_androidmanifest_xml(apk_file)
    #android_manifest_xml_data = eif_obj.extract_from_androidmanifest_xml("/home/kali/appsec-project/preprod/smartplug.apk")
    android_manifest_xml_data={'android_version': {'Code': '10', 'Name': '10.0'}, 'app_name': 'Walley', 'package_name': 'com.thewalleyapp', 'user_permission': [['android.permission.READ_SMS', None], ['android.permission.VIBRATE', None], ['android.permission.RECEIVE_BOOT_COMPLETED', None], ['android.permission.ACCESS_NETWORK_STATE', None], ['android.permission.INTERNET', None], ['android.permission.WAKE_LOCK', None], ['com.google.android.c2dm.permission.RECEIVE', None], ['com.google.android.finsky.permission.BIND_GET_INSTALL_REFERRER_SERVICE', None], ['com.sec.android.provider.badge.permission.READ', None], ['com.sec.android.provider.badge.permission.WRITE', None], ['com.htc.launcher.permission.READ_SETTINGS', None], ['com.htc.launcher.permission.UPDATE_SHORTCUT', None], ['com.sonyericsson.home.permission.BROADCAST_BADGE', None], ['com.sonymobile.home.permission.PROVIDER_INSERT_BADGE', None], ['com.anddoes.launcher.permission.UPDATE_COUNT', None], ['com.majeur.launcher.permission.UPDATE_BADGE', None], ['com.huawei.android.launcher.permission.CHANGE_BADGE', None], ['com.huawei.android.launcher.permission.READ_SETTINGS', None], ['com.huawei.android.launcher.permission.WRITE_SETTINGS', None], ['android.permission.READ_APP_BADGE', None], ['com.oppo.launcher.permission.READ_SETTINGS', None], ['com.oppo.launcher.permission.WRITE_SETTINGS', None], ['me.everything.badger.permission.BADGE_COUNT_READ', None], ['me.everything.badger.permission.BADGE_COUNT_WRITE', None], ['android.permission.FOREGROUND_SERVICE', None]], 'permission': ['android.permission.VIBRATE', 'me.everything.badger.permission.BADGE_COUNT_READ', 'com.sec.android.provider.badge.permission.READ', 'com.huawei.android.launcher.permission.WRITE_SETTINGS', 'android.permission.ACCESS_NETWORK_STATE', 'com.htc.launcher.permission.UPDATE_SHORTCUT', 'com.huawei.android.launcher.permission.READ_SETTINGS', 'android.permission.RECEIVE_BOOT_COMPLETED', 'com.htc.launcher.permission.READ_SETTINGS', 'android.permission.READ_APP_BADGE', 'com.huawei.android.launcher.permission.CHANGE_BADGE', 'android.permission.READ_SMS', 'android.permission.WAKE_LOCK', 'com.sonymobile.home.permission.PROVIDER_INSERT_BADGE', 'me.everything.badger.permission.BADGE_COUNT_WRITE', 'com.majeur.launcher.permission.UPDATE_BADGE', 'android.permission.INTERNET', 'com.oppo.launcher.permission.READ_SETTINGS', 'com.google.android.finsky.permission.BIND_GET_INSTALL_REFERRER_SERVICE', 'com.sonyericsson.home.permission.BROADCAST_BADGE', 'com.anddoes.launcher.permission.UPDATE_COUNT', 'com.oppo.launcher.permission.WRITE_SETTINGS', 'com.google.android.c2dm.permission.RECEIVE', 'android.permission.FOREGROUND_SERVICE', 'com.sec.android.provider.badge.permission.WRITE'], 'intent_filter_list': [{'com.thewalleyapp.MainActivity': {'action': ['android.intent.action.MAIN'], 'category': ['android.intent.category.LAUNCHER']}}, {'com.google.firebase.auth.internal.GenericIdpActivity': {'action': ['android.intent.action.VIEW'], 'category': ['android.intent.category.DEFAULT', 'android.intent.category.BROWSABLE']}}, {'com.google.firebase.auth.internal.RecaptchaActivity': {'action': ['android.intent.action.VIEW'], 'category': ['android.intent.category.DEFAULT', 'android.intent.category.BROWSABLE']}}]}

    # Process intent filter
    intent_filter_list =  eif_obj.get_intent_list(android_manifest_xml_data)
    #activity_file_paths = eif_obj.intent_filter_to_path(intent_filter_list, path_to_glob)
    activity_file_paths = eif_obj.intent_filter_to_path(intent_filter_list, "/home/kali/appsec-project/preprod/app_source/com.thewalleyapp.apk")

    # searching getString in activity files
    for file in activity_file_paths:
        to_find = "-e getExternalFilesDir"
        code = eif_obj.get_vulnerable_code(to_find, file)
        if len(code) >0:
            print("\n" + file + "\n")
            print(code)
        else:
            print(to_find + " not found in " + file)
    




local_file_vul()

"""
from sensitive_info_extractor import SensitiveInfoExtractor
from exploit_intent_filter import ExploitIntentFilter

def local_file_vul():
    sie_obj  = SensitiveInfoExtractor()
    eif_obj = ExploitIntentFilter()
    file_paths = sie_obj.get_all_file_paths( "/home/kali/appsec-project/preprod/app_source/orignal-smartplug.apk")

    counter  = 0
    for file in file_paths:
        to_find = "-e getExternalFilesDir"
        code = eif_obj.get_vulnerable_code(to_find, file)
        if len(code) >0:
            print("\n" + file + "\n")
            print(code)
            counter += 1
        else:
            pass
    print(counter)

local_file_vul()